{"version":3,"sources":["imgAvatar.svg","components/Home/TotalBuildsBarGraph.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TotalBuildsBarGraph","state","input_json","is_loaded","fetch","then","res","json","setState","catch","err","console","log","this","Bullseye","Spinner","successful","failed","domain_upper_limit","map","item","succ_day","name","x","date","y","successful_builds","push","fail_day","failed_builds","Card","CardHeader","CardBody","style","width","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","labels","datum","constrainToVisibleArea","domain","domainPadding","height","padding","bottom","left","right","top","ChartAxis","label","dependentAxis","ChartGroup","offset","ChartBar","barWidth","data","Component","Home","PageSection","variant","PageSectionVariants","light","TextContent","Text","component","href","Grid","gutter","GridItem","span","isFilled","App","props","isDropdownOpen","isKebabDropdownOpen","activeItem","onDropdownToggle","onDropdownSelect","event","onKebabDropdownToggle","onKebabDropdownSelect","onNavSelect","result","itemId","PageNav","Nav","onSelect","aria-label","NavList","NavVariants","horizontal","NavItem","isActive","kebabDropdownItems","DropdownItem","userDropdownItems","isDisabled","DropdownSeparator","PageToolbar","Toolbar","ToolbarGroup","className","css","accessibleStyles","screenReader","visibleOnLg","ToolbarItem","Button","id","ButtonVariant","plain","hiddenOnLg","spacingStyles","mr_0","Dropdown","isPlain","position","toggle","KebabToggle","onToggle","isOpen","dropdownItems","visibleOnMd","DropdownToggle","Header","PageHeader","logo","Brand","src","alt","toolbar","avatar","Avatar","imgAvatar","topNav","PageBreadcrumb","Breadcrumb","BreadcrumbItem","to","pageId","PageSkipToContent","SkipToContent","Fragment","Page","header","skipToContent","breadcrumb","mainContainerId","React","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d104b1ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imgAvatar.30daf3cd.svg\";","import React, { Component } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Spinner,\n  Bullseye,\n} from \"@patternfly/react-core\";\nimport {\n  Chart,\n  ChartBar,\n  ChartGroup,\n  ChartAxis,\n  ChartVoronoiContainer,\n} from \"@patternfly/react-charts\";\n\nclass TotalBuildsBarGraph extends Component {\n  state = {\n    input_json: \"\",\n    is_loaded: false,\n  };\n\n  componentDidMount() {\n    // Hardcoding now, but when we integrate it with flask we'll pick up the API_URL from env var.\n    fetch(\"https://other.abifog.com/test.php\")\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          input_json: json,\n          is_loaded: true,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    const { is_loaded, input_json } = this.state;\n\n    if (!is_loaded)\n      return (\n        <div>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </div>\n      );\n\n    let successful = [];\n    let failed = [];\n    let domain_upper_limit = 0;\n\n    input_json.map((item) => {\n      let succ_day = {\n        name: \"Successful\",\n        x: item.date,\n        y: item.successful_builds,\n      };\n\n      if (domain_upper_limit < item.successful_builds)\n        domain_upper_limit = item.successful_builds;\n      successful.push(succ_day);\n      let fail_day = {\n        name: \"Failed\",\n        x: item.date,\n        y: item.failed_builds,\n      };\n      failed.push(fail_day);\n    });\n\n    console.log(domain_upper_limit);\n\n    return (\n      <Card>\n        <CardHeader>Successful/Failed Builds</CardHeader>\n        <CardBody>\n          <div style={{ width: \"500px\" }}>\n            <Chart\n              ariaDesc=\"Total Builds Per Day\"\n              ariaTitle=\"Total Builds\"\n              containerComponent={\n                <ChartVoronoiContainer\n                  labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                  constrainToVisibleArea\n                />\n              }\n              domain={{ y: [0, domain_upper_limit + 5] }}\n              domainPadding={{ x: [30, 25] }}\n              height={250}\n              padding={{\n                bottom: 60,\n                left: 60,\n                right: 50,\n                top: 50,\n              }}\n              width={500}\n            >\n              <ChartAxis label=\"Days\" />\n              <ChartAxis dependentAxis label=\"Builds\" />\n              <ChartGroup offset={20}>\n                <ChartBar barWidth={20} data={successful} />\n                <ChartBar barWidth={20} data={failed} />\n              </ChartGroup>\n            </Chart>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default TotalBuildsBarGraph;\n","import React, { Component } from \"react\";\nimport {\n  Grid,\n  GridItem,\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n} from \"@patternfly/react-core\";\n\nimport TotalBuildsBarGraph from \"./TotalBuildsBarGraph.js\";\n\n\nclass Home extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <PageSection variant={PageSectionVariants.light}>\n          <TextContent>\n            <Text component=\"h1\">Home</Text>\n            <Text component=\"p\">\n            Using mock JSON from <a href=\"https://other.abifog.com/test.php\">other.abifog.com/test.php</a> because this data is not yet provided by the API.\n            </Text>\n          </TextContent>\n        </PageSection>\n        <PageSection>\n          <Grid gutter=\"md\">\n            <GridItem span={6}>\n              <TotalBuildsBarGraph />\n            </GridItem>\n            <GridItem span={6}>\n              <TotalBuildsBarGraph />\n            </GridItem>\n          </Grid>\n        </PageSection>\n        <PageSection style={{ height: \"15em\" }} isFilled={true}></PageSection>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import \"@patternfly/react-core/dist/styles/base.css\";\nimport \"./fonts.css\";\n\nimport React from \"react\";\nimport {\n  Avatar,\n  Brand,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  NavVariants,\n  Page,\n  PageHeader,\n  SkipToContent,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from \"@patternfly/react-styles/css/utilities/Accessibility/accessibility\";\nimport spacingStyles from \"@patternfly/react-styles/css/utilities/Spacing/spacing\";\nimport { css } from \"@patternfly/react-styles\";\nimport { BellIcon, CogIcon } from \"@patternfly/react-icons\";\n\nimport Home from \"./components/Home/Home.js\";\n\nimport imgAvatar from \"./imgAvatar.svg\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0,\n    };\n\n    this.onDropdownToggle = (isDropdownOpen) => {\n      this.setState({\n        isDropdownOpen,\n      });\n    };\n\n    this.onDropdownSelect = (event) => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen,\n      });\n    };\n\n    this.onKebabDropdownToggle = (isKebabDropdownOpen) => {\n      this.setState({\n        isKebabDropdownOpen,\n      });\n    };\n\n    this.onKebabDropdownSelect = (event) => {\n      this.setState({\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen,\n      });\n    };\n\n    this.onNavSelect = (result) => {\n      this.setState({\n        activeItem: result.itemId,\n      });\n    };\n  }\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\">\n        <NavList variant={NavVariants.horizontal}>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>,\n    ];\n    const userDropdownItems = [\n      <DropdownItem>Link</DropdownItem>,\n      <DropdownItem component=\"button\">Action</DropdownItem>,\n      <DropdownItem isDisabled>Disabled Link</DropdownItem>,\n      <DropdownItem isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator />,\n      <DropdownItem>Separated Link</DropdownItem>,\n      <DropdownItem component=\"button\">Separated Action</DropdownItem>,\n    ];\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup\n          className={css(\n            accessibleStyles.screenReader,\n            accessibleStyles.visibleOnLg\n          )}\n        >\n          <ToolbarItem>\n            <Button\n              id=\"horizontal-example-uid-01\"\n              aria-label=\"Notifications actions\"\n              variant={ButtonVariant.plain}\n            >\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button\n              id=\"horizontal-example-uid-02\"\n              aria-label=\"Settings actions\"\n              variant={ButtonVariant.plain}\n            >\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem\n            className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem\n            className={css(\n              accessibleStyles.screenReader,\n              accessibleStyles.visibleOnMd\n            )}\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={\n                <DropdownToggle onToggle={this.onDropdownToggle}>\n                  Kyle Baker\n                </DropdownToggle>\n              }\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n\n    const Header = (\n      <PageHeader\n        logo={\n          <Brand\n            src=\"https://raw.githubusercontent.com/packit-service/packit/master/design/export/logo-extended.png\"\n            alt=\"Patternfly Logo\"\n          />\n        }\n        toolbar={PageToolbar}\n        avatar={<Avatar src={imgAvatar} alt=\"Avatar image\" />}\n        topNav={PageNav}\n      />\n    );\n\n    const PageBreadcrumb = (\n      <Breadcrumb>\n        <BreadcrumbItem>Section Home</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Section landing\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n    const pageId = \"main-content-page-layout-horizontal-nav\";\n    const PageSkipToContent = (\n      <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>\n    );\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          skipToContent={PageSkipToContent}\n          breadcrumb={PageBreadcrumb}\n          mainContainerId={pageId}\n        >\n        <Home/>\n         \n        </Page>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}